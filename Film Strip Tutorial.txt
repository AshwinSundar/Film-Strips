You can extract images from a video, or create a video from many images:
For extracting images from a video:

ffmpeg -i foo.avi -r 1 -s WxH -f image2 foo-%03d.jpeg
This will extract one video frame per second from the video and will output them in files named foo-001.jpeg, foo-002.jpeg, etc. Images will be rescaled to fit the new WxH values.

If you want to extract just a limited number of frames, you can use the above command in combination with the -vframes or -t option, or in combination with -ss to start extracting from a certain point in time.

---- Steps ----
1) Download and install ffmpeg, a command line tool:
	http://ffmpeg.org/download.html
2) extra images from the video
	a) Navigate to C:\Users\Ashwin\Documents\ffmpeg-20160610-git-0a9e781-win64-static (or wherever you unzipped ffmpeg to)
	b) Open ff-prompt
	c) Within FF Prompt, navigate to the video directory using:
		cd {directory name}
	d) in FF Prompt, type the following:
		ffmpeg -i foo.avi -r 1 -s WxH -f image2 s{season number e.g. 01}e{episode number e.g. 01}-%03d.jpeg
	   Replace foo.avi with whatever video file you want to process. Doesn't have to be .avi. Might want to rename video file so you can more easily type the file name in command prompt. Also replace WxH with the video resolution width by height (e.g. 1080x720). This will extract one video frame per second from the video and will output them in files named {desired image title}-001.jpeg, {desired image title}-002.jpeg, etc. Images will be rescaled to fit the new WxH values. This command will take about 5  minutes to run per hour of video. 

3) Move all the generated images into their own folder. Copy averageColorGrab.m into the same folder as the images.

4) open the MATLAB script averageColorGrab.m that you just copied over. 
	a) Modify the season and episode number. Change the videoLength to the duration of the video in seconds. Easiest way to do this is to see how many jpegs you generated in step 1c. Save the file with ctrl+S
	b) Run the script by typing in the console:
		averageColorGrab
	   Script takes about 180 seconds to analyze 1 hour worth of 1080p video. 

5) Open averagesXXeYYR in Excel
	a) You'll have to import it as a comma-delimited file. Excel should prompt you to do so when you attempt to open the file.
	b) Type '=A1' into cell A2. 
	c) Copy cell A2 down to row 720 (or the height of the original video, and across to the end of the file. 
	d) Save the file.
	e) Follow steps 3a through 3d for the G and B color channels as well. 

6) In MATLAB, right click on each color channel file you edited in Excel and click 'Import Data'. It will take several seconds to load the large file. 
	a) Import each file as a numeric matrix
	b) concatenate the matrices into a multidimensional RGB matrix using:
		averagesXXeYYRGB = cat(3, averagesXXeYYR, averagesXXeYYG, averagesXXeYYB);
	c) Generate a figure with:
		imshow(mat2gray(averagesXXeYYRGB))
	d) In the console, type the following (replace videoLength with the actual video length in seconds): 
		set(gcf,'PaperUnits','inches','PaperPosition',[0,0,videoLength,720])
		set(gca,'position',[0 0 1 1],'units','normalized')
		print -djpeg averagesXXeXXRGB -r1
	e) if white bars appears on the edges of the final JPEG, the figure wasn't cropped correctly. Play with the last two parameters in the [0,0,videolength,720] setting above.
	f) type csvwrite('averagesXXeYYRGB', averagesXXeYYRGB) to save the final RGB matrix. 

	